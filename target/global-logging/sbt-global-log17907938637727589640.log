[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Иван\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Иван\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.0 (Oracle Corporation Java 11.0.2)
[debug]       Load.loadUnit: plugins took 117.8798ms
[debug]       Load.loadUnit: defsScala took 0.7497ms
[debug] [Loading] Scanning directory C:\Users\Иван\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Иван\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.2987 ms
[debug]           Load.resolveProject(global-plugins) took 55.0403ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Иван\.sbt\1.0\plugins, plugins: List(<none>))) took 131.912ms
[debug] [Loading] Done in C:\Users\Иван\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 166.3617ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2901ms
[debug]     Load.loadUnit(file:/C:/Users/Иван/.sbt/1.0/plugins/, ...) took 301.8211ms
[debug]   Load.apply: load took 503.9842ms
[debug]   Load.apply: resolveProjects took 10.9254ms
[debug]   Load.apply: finalTransforms took 114.8105ms
[debug]   Load.apply: config.delegates took 12.3207ms
[debug]   Load.apply: Def.make(settings)... took 628.2473ms
[debug]   Load.apply: structureIndex took 161.5679ms
[debug]   Load.apply: mkStreams took 3.7322ms
[info] loading global plugins from C:\Users\Иван\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6270.4251ms
[debug]           Load.loadUnit: plugins took 54.1063ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\Иван\Desktop\youtube_analyzer\project
[debug]             Load.loadUnit: mkEval took 9.9752ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Иван\Desktop\youtube_analyzer\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4394 ms
[info] loading settings for project youtube_analyzer-build from idea1.sbt ...
[debug]               Load.resolveProject(youtube_analyzer-build) took 9.7462ms
[debug]             Load.loadTransitive: finalizeProject(Project(id youtube_analyzer-build, base: C:\Users\Иван\Desktop\youtube_analyzer\project, plugins: List(<none>))) took 11.6197ms
[debug] [Loading] Done in C:\Users\Иван\Desktop\youtube_analyzer\project, returning: (youtube_analyzer-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3048.6014ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.8654ms
[debug]         Load.loadUnit(file:/C:/Users/Иван/Desktop/youtube_analyzer/project/, ...) took 3110.331ms
[debug]       Load.apply: load took 3113.2844ms
[debug]       Load.apply: resolveProjects took 0.0985ms
[debug]       Load.apply: finalTransforms took 15.599ms
[debug]       Load.apply: config.delegates took 0.2897ms
[debug]       Load.apply: Def.make(settings)... took 73.999ms
[debug]       Load.apply: structureIndex took 20.0485ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\Иван\Desktop\youtube_analyzer\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3595.6248ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\Иван\Desktop\youtube_analyzer
[debug]       Load.loadUnit: mkEval took 0.2584ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9483 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 26.8409ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Иван\Desktop\youtube_analyzer, plugins: List(<none>))) took 30.9445ms
[debug] [Loading] Done in C:\Users\Иван\Desktop\youtube_analyzer, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1789.0413ms
[debug]     Load.loadUnit: cleanEvalClasses took 16.8116ms
[debug]   Load.loadUnit(file:/C:/Users/Иван/Desktop/youtube_analyzer/, ...) took 5401.9974ms
[debug] Load.apply: load took 5404.6599ms
[debug] Load.apply: resolveProjects took 0.2658ms
[debug] Load.apply: finalTransforms took 27.3253ms
[debug] Load.apply: config.delegates took 0.3204ms
[debug] Load.apply: Def.make(settings)... took 52.6173ms
[debug] Load.apply: structureIndex took 18.699ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to youtube_analyzer (in build file:/C:/Users/Иван/Desktop/youtube_analyzer/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 1291 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 1291, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to youtube_analyzer (in build file:/C:/Users/Иван/Desktop/youtube_analyzer/)
[debug] > Exec(idea-shell, None, None)
